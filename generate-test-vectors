#!/usr/bin/env python3
'''Deterministically generate test vectors for draft-protected-headers.

We want each run to produce the same specific output, which means
hard-coding things (like timestamps, time zones, MIME boundaries,
message-ids) which are likely to be vary across real-world conditions.

Pains are taken to minimize the total amount of output, while still
preserving a plausible, minimal, correctly-formed message.
'''

import sys
import codecs
import hashlib
import datetime
import email.policy
import email.message

import pgpy #type: ignore

from typing import Dict, Union, TextIO

cfg:Dict[str,Dict[str,Union[bool,bytes]]] = {
    'signed': {
        'encrypt': False,
    },
    'signed+encrypted': {
        'encrypt': True,
        'multilayer': False,
        'legacy': False,
        'multipart': False,
        'sk': b'8df4b2d27d5637138ac6de46415661be0bd01ed12ecf8c1db22a33cf3ede82f2'
    },
    'multilayer': {
        'encrypt': True,
        'multilayer': True,
        'legacy': False,
        'multipart': False,
        'sk': b'5e67165ed1516333daeba32044f88fd75d4a9485a563d14705e41d31fb61a9e9'
    },
    'sign+enc+legacy-display': {
        'encrypt': True,
        'multilayer': False,
        'legacy': True,
        'multipart': False,
        'sk': b'95a71b0e344cce43a4dd52c5fd01deec5118290bfd0792a8a733c653a12d223e'
    },
    'multilayer+legacy-display': {
        'encrypt': True,
        'multilayer': True,
        'legacy': True,
        'multipart': False,
        'sk': b'b346a2a50fa0cf62895b74e8c0d2ad9e3ee1f02b5d564c77d879caaee7a0aa70'
    },
    'unfortunately-complex': {
        'encrypt': True,
        'multilayer': True,
        'legacy': True,
        'multipart': True,
        'sk': b'1c489cfad9f3c0bf3214bf34e6da42b7f64005e59726baa1b17ffdefe6ecbb52'
    },
}


def usage(to:TextIO=sys.stdout) -> None:
    subcmds = '\n  '.join(list(cfg.keys()))
    print(f'''Usage: {sys.argv[0]} SUBCMD
where SUBCMD is one of:
  help
  list-vectors
  {subcmds}''', file=to)

# We want maxheaderlen=72 here so that the example fits nicely
# in an Internet Draft.  But it is risky -- i think it could
# break a signed message with long headers.  We get away with
# it because our Cryptographic Payload is already narrow.
MAXHEADERLEN=72
    
# from https://tools.ietf.org/html/draft-bre-openpgp-samples-00#section-2.2:
alice_sec = '''-----BEGIN PGP PRIVATE KEY BLOCK-----
Comment: Alice's OpenPGP Transferable Secret Key

lFgEXEcE6RYJKwYBBAHaRw8BAQdArjWwk3FAqyiFbFBKT4TzXcVBqPTB3gmzlC/U
b7O1u10AAP9XBeW6lzGOLx7zHH9AsUDUTb2pggYGMzd0P3ulJ2AfvQ4RtCZBbGlj
ZSBMb3ZlbGFjZSA8YWxpY2VAb3BlbnBncC5leGFtcGxlPoiQBBMWCAA4AhsDBQsJ
CAcCBhUKCQgLAgQWAgMBAh4BAheAFiEE64W7X6M6deFelE5j8jFVDE9H444FAl2l
nzoACgkQ8jFVDE9H447pKwD6A5xwUqIDprBzrHfahrImaYEZzncqb25vkLV2arYf
a78A/R3AwtLQvjxwLDuzk4dUtUwvUYibL2sAHwj2kGaHnfICnF0EXEcE6RIKKwYB
BAGXVQEFAQEHQEL/BiGtq0k84Km1wqQw2DIikVYrQrMttN8d7BPfnr4iAwEIBwAA
/3/xFPG6U17rhTuq+07gmEvaFYKfxRB6sgAYiW6TMTpQEK6IeAQYFggAIBYhBOuF
u1+jOnXhXpROY/IxVQxPR+OOBQJcRwTpAhsMAAoJEPIxVQxPR+OOWdABAMUdSzpM
hzGs1O0RkWNQWbUzQ8nUOeD9wNbjE3zR+yfRAQDbYqvtWQKN4AQLTxVJN5X5AWyb
Pnn+We1aTBhaGa86AQ==
=n8OM
-----END PGP PRIVATE KEY BLOCK-----
'''
(alice_key, _) = pgpy.PGPKey.from_blob(alice_sec)

# from https://tools.ietf.org/html/draft-bre-openpgp-samples-00#section-3.1:
bob_pub = '''-----BEGIN PGP PUBLIC KEY BLOCK-----
Comment: Bob's OpenPGP certificate

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
NEJd3XZRzaXZE2aAMQ==
=NXei
-----END PGP PUBLIC KEY BLOCK-----
'''
(bob_key, _) = pgpy.PGPKey.from_blob(bob_pub)

def getsigpart(pgpsig:pgpy.PGPSignature) -> email.message.MIMEPart:
    sigpart = email.message.MIMEPart()
    sigpart.set_content(str(pgpsig).strip())
    sigpart.set_type('application/pgp-signature')
    sigpart.set_charset(None) # the test vector data is 7-bit clean
    del sigpart['MIME-Version'] # MIME-Version on subparts is meaningless
    del sigpart['Content-Transfer-Encoding'] # ASCII-armored PGP Signature data is 7-bit clean
    return sigpart

def signed(params:Dict[str,Union[bool,bytes]]) -> email.message.Message:
    # seconds since the unix epoch
    posixtime = 1571577491
    # America/New_York during DST:
    tz = datetime.timezone(datetime.timedelta(hours=-4))
    # 2019-10-20T09:18:11-0400
    when = datetime.datetime.fromtimestamp(posixtime, tz)
    whenstring = when.strftime('%a, %d %b %Y %T %z').strip()

    # message was received 17 seconds after it was generated:
    rcvd = datetime.datetime.fromtimestamp(posixtime + 17, tz)
    rcvdstring = rcvd.strftime('%a, %d %b %Y %T %z (%Z)').strip()

    # make the Cryptographic Payload:
    payload = email.message.MIMEPart()
    dotsig_separator = '-- ' # this is a totally different kind of "signature"
    payload.set_content(f'''Bob, we need to cancel this contract.

Please start the necessary processes to make that happen today.

Thanks, Alice
{dotsig_separator}
Alice Lovelace
President
OpenPGP Example Corp''')
    payload.set_type('text/plain')
    payload.set_charset('us-ascii') # the test vector data is 7-bit clean
    del payload['MIME-Version'] # MIME-Version on subparts is meaningless
    del payload['Content-Transfer-Encoding'] # the test vector data is 7-bit clean
    # place intended headers on the payload:
    payload['From'] = f'{alice_key.userids[0].name} <{alice_key.userids[0].email}>'
    payload['To'] = f'{bob_key.userids[0].name} <{bob_key.userids[0].email}>'
    payload['Date'] = whenstring
    payload['Subject'] = 'The FooCorp contract'
    payload['Message-ID'] = '<signed@protected-headers.example>'

    # Note that https://github.com/SecurityInnovation/PGPy/issues/291 needs to be fixed
    # in order for the signature creation time to match the message Date header:
    pgpsig = alice_key.sign(pgpy.PGPMessage.new(str(payload), cleartext=True), created=when)
    sigpart = getsigpart(pgpsig)

    msg = email.message.Message()
    # Example transit header that is not part of the protected headers:
    msg['Received'] = f'from localhost (localhost [127.0.0.1]); {rcvdstring}'
    msg.set_type('multipart/signed')
    # making up an arbitrary MIME boundary based on the Message-ID:
    msg.set_boundary(hashlib.sha256(payload['Message-ID'].encode()).hexdigest()[:10])
    msg.set_param('protocol', 'application/pgp-signature')
    msg.set_param('micalg', f'pgp-{pgpsig.hash_algorithm.name.lower()}')
    msg.attach(payload)
    msg.attach(sigpart)

    # ensure that all non-Content headers from the payload are also on
    # the message:
    for h in payload.keys():
        if not h.lower().startswith('content-'): # don't transfer Content-* headers
            if msg.get(h, None) != payload[h]: # don't duplicate headers that already exist
                msg[h] = payload[h]
    return msg

def cleanpart(part:email.message.MIMEPart) -> None:
    del part['MIME-Version'] # MIME-Version on subparts is meaningless
    del part['Content-Transfer-Encoding'] # the test vector data is 7-bit clean

def make_payload(multipart:bool=False) -> email.message.MIMEPart:
    payload:email.message.MIMEPart = email.message.MIMEPart()
    dotsig_separator = '-- ' # this is a totally different kind of "signature"
    txt = f'''Hi Bob!

I just signed the contract with BarCorp and they've set us up with
an account on their system for testing.

The account information is:

        Site: https://barcorp.example/
    Username: examplecorptest
    Password: correct-horse-battery-staple

Please get the account set up and apply the test harness.

Let me know when you've got some results.

Thanks, Alice
{dotsig_separator}
Alice Lovelace
President
OpenPGP Example Corp'''

    if not multipart:
        payload.set_content(txt)
        payload.set_type('text/plain')
        payload.set_charset('us-ascii')
        cleanpart(payload)
    else:
        html = f'''<html><head></head><body><p>Hi Bob!
</p><p>
I just signed the contract with BarCorp and they've set us up with
 an account on their system for testing.
</p><p>
The account information is:
</p><dl>
<dt>Site</dt><dd>
<a href="https://barcorp.example/">https://barcorp.example/</a>
</dd>
<dt>Username</dt><dd><tt>examplecorptest</tt></dd>
<dt>Password</dt><dd>correct-horse-battery-staple</dd>
</dl><p>
Please get the account set up and apply the test harness.
</p><p>
Let me know when you've got some results.
</p><p>
Thanks, Alice<br/>
{dotsig_separator}<br/>
Alice Lovelace<br/>
President<br/>
OpenPGP Example Corp<br/>
</p></body></html>'''
        attachment = f'''diff -ruN a/testharness.cfg b/testharness.cfg
--- a/testharness.cfg
+++ b/testharness.cfg
@@ -13,3 +13,8 @@
 endpoint = https://openpgp.example/test/
 username = testuser
 password = MJVMZlHR75mILg
+
+[barcorp]
+endpoint = https://barcorp.example/
+username = examplecorptest
+password = correct-horse-battery-staple
'''
        txtpart:email.message.MIMEPart = email.message.MIMEPart()
        txtpart.set_content(txt)
        txtpart.set_type('text/plain')
        txtpart.set_charset('us-ascii')
        cleanpart(txtpart)

        htmlpart:email.message.MIMEPart = email.message.MIMEPart()
        htmlpart.set_content(html)
        htmlpart.set_type('text/html')
        htmlpart.set_charset('us-ascii')
        cleanpart(htmlpart)

        altpart:email.message.MIMEPart = email.message.MIMEPart()
        altpart.set_type('multipart/alternative')
        altpart.set_boundary(hashlib.sha256('multipart-alternative'.encode()).hexdigest()[:10])
        cleanpart(altpart)
        altpart.attach(txtpart)
        altpart.attach(htmlpart)
        
        attachmentpart:email.message.MIMEPart = email.message.MIMEPart()
        attachmentpart.set_content(attachment)
        attachmentpart.set_type('text/x-diff')
        attachmentpart.set_charset('us-ascii')
        cleanpart(attachmentpart)
        attachmentpart['Content-Disposition'] = 'inline; filename="testharness-config.diff"'
        
        payload.set_type('multipart/mixed')
        payload.set_boundary(hashlib.sha256('multipart-mixed'.encode()).hexdigest()[:10])
        cleanpart(payload)
        payload.attach(altpart)
        payload.attach(attachmentpart)
    return payload

def signed_encrypted(msgid:str, params:Dict[str,Union[bool,bytes]]) -> email.message.Message:
    # seconds since the unix epoch
    posixtime = 1571667491
    # America/Los_Angeles during DST:
    tz = datetime.timezone(datetime.timedelta(hours=-7))
    # 2019-10-21T07:18:11-0700
    when = datetime.datetime.fromtimestamp(posixtime, tz)
    whenstring = when.strftime('%a, %d %b %Y %T %z').strip()

    # message was received 28 seconds after it was generated:
    rcvd = datetime.datetime.fromtimestamp(posixtime + 28, tz)
    rcvdstring = rcvd.strftime('%a, %d %b %Y %T %z (%Z)').strip()

    # make the Cryptographic Payload:
    if not isinstance(params['multipart'], bool):
        raise TypeError('multipart is not a bool')
    payload = make_payload(params['multipart'])

    subj = 'BarCorp contract signed, let\'s go!'

    if params['legacy']:
        legacydisplay = email.message.MIMEPart()
        legacydisplay.set_content(f'Subject: {subj}\n')
        legacydisplay.set_type('text/rfc822-headers')
        legacydisplay.set_param('protected-headers', 'v1')
        legacydisplay.set_charset(None) # header data is always 7-bit clean
        del legacydisplay['MIME-Version'] # MIME-Version on subparts is meaningless
        del legacydisplay['Content-Transfer-Encoding'] # header data is always 7-bit clean
        legacydisplay['Content-Disposition'] = 'inline'
    
        innerpayload = payload
        payload = email.message.MIMEPart()
        payload.set_type('multipart/mixed')
        del payload['MIME-Version'] # MIME-Version on subparts is meaningless
        # arbitrary fixed boundary for replicability:
        payload.set_boundary(hashlib.sha256('legacy-wrapper'.encode()).hexdigest()[:10])
        payload.attach(legacydisplay)
        payload.attach(innerpayload)
    
    # place intended headers on the payload:
    payload['From'] = f'{alice_key.userids[0].name} <{alice_key.userids[0].email}>'
    payload['To'] = f'{bob_key.userids[0].name} <{bob_key.userids[0].email}>'
    payload['Date'] = whenstring
    payload['Subject'] = subj

    if not isinstance(params['sk'], bytes):
        raise TypeError('sk is not bytes')
    sessionkey = codecs.decode(params['sk'], 'hex')
    payload['Message-ID'] = f"<{msgid}@protected-headers.example>"

    if params['multilayer']:
        # Note that https://github.com/SecurityInnovation/PGPy/issues/291 needs to be fixed
        # in order for the signature creation time to match the message Date header:
        pgpsig = alice_key.sign(pgpy.PGPMessage.new(str(payload), cleartext=True), created=when)
        sigpart = getsigpart(pgpsig)

        sigwrapper = email.message.MIMEPart()
        sigwrapper.set_type('multipart/signed')
        del sigwrapper['MIME-Version'] # MIME-Version on subparts is meaningless
        del sigwrapper['Content-Transfer-Encoding'] # test data is all 7-bit clean
        sigwrapper.set_boundary(hashlib.sha256(f"inner{payload['Message-ID']}".encode()).hexdigest()[:10])
        sigwrapper.set_param('protocol', 'application/pgp-signature')
        sigwrapper.set_param('micalg', f'pgp-{pgpsig.hash_algorithm.name.lower()}')
        sigwrapper.attach(payload)
        sigwrapper.attach(sigpart)

        payloadmsg = pgpy.PGPMessage.new(str(sigwrapper), format='m')
    else:
        payloadmsg = pgpy.PGPMessage.new(str(payload), format='m')
        # Note that https://github.com/SecurityInnovation/PGPy/issues/291 needs to be fixed
        # in order for the signature creation time to match the message Date header:
        payloadmsg |= alice_key.sign(payloadmsg, created=when)

    cipher = pgpy.constants.SymmetricKeyAlgorithm.AES256

    encmsg = alice_key.pubkey.encrypt(payloadmsg, cipher=cipher, sessionkey=sessionkey)
    encmsg = bob_key.encrypt(encmsg, cipher=cipher, sessionkey=sessionkey)

    encpart = email.message.MIMEPart()
    encpart.set_content(str(encmsg))
    encpart.set_type('application/octet-stream')
    encpart.set_charset(None) # encrypted body is ASCII-armored already
    del encpart['MIME-Version'] # MIME-Version on subparts is meaningless
    del encpart['Content-Transfer-Encoding'] # ASCII-armored data is 7-bit clean

    cruft = email.message.MIMEPart()
    cruft.set_content('Version: 1')
    cruft.set_type('application/pgp-encrypted')
    cruft.set_charset(None) # the cruft data is 7-bit clean by definition
    del cruft['MIME-Version'] # MIME-Version on subparts is meaningless
    del cruft['Content-Transfer-Encoding'] # the cruft data is 7-bit clean by definition
    
    msg = email.message.Message()
    # Example transit header that is not part of the protected headers:
    msg['Received'] = f'from localhost (localhost [127.0.0.1]); {rcvdstring}'
    msg.set_type('multipart/encrypted')
    # making up an arbitrary MIME boundary based on the Message-ID:
    msg.set_boundary(hashlib.sha256(payload['Message-ID'].encode()).hexdigest()[:10])
    msg.set_param('protocol', 'application/pgp-encrypted')
    msg.attach(cruft)
    msg.attach(encpart)

    # ensure that all non-Content headers from the payload are also on
    # the message:
    for h in payload.keys():
        if not h.lower().startswith('content-'): # don't transfer Content-* headers
            if h.lower() != 'subject': # we will obscure Subject line
                if msg.get(h, None) != payload[h]: # don't duplicate headers that already exist
                    msg[h] = payload[h]
    msg['Subject'] = '...'
    return msg

if __name__ == '__main__':
    if len(sys.argv) < 2:
        usage(to=sys.stderr)
        exit(1)
    if sys.argv[1] == 'help':
        usage()
    elif sys.argv[1] in cfg:
        params = cfg[sys.argv[1]]
        if not params['encrypt']:
            msg = signed(params)
        else:
            msg = signed_encrypted(sys.argv[1], params)
        print(msg.as_string(maxheaderlen=MAXHEADERLEN))
    elif sys.argv[1] == 'list-vectors':
        for vector in cfg:
            print(vector)
    else:
        print(f'Unknown argument "{sys.argv[1]}"', file=sys.stderr)
        usage(to=sys.stderr)
        exit(1)
